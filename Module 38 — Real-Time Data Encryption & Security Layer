# Module 38 â€” Real-Time Data Encryption & Security Layer

from cryptography.fernet import Fernet

class SecurityLayer:
    def __init__(self, key=None):
        self.key = key or Fernet.generate_key()
        self.cipher = Fernet(self.key)
    
    def encrypt_data(self, data: bytes):
        return self.cipher.encrypt(data)
    
    def decrypt_data(self, encrypted_data: bytes):
        return self.cipher.decrypt(encrypted_data)

# Example usage:
# sec_layer = SecurityLayer()
# encrypted = sec_layer.encrypt_data(b"Sensitive Data")
# print(encrypted)
# decrypted = sec_layer.decrypt_data(encrypted)
# print(decrypted)
```
